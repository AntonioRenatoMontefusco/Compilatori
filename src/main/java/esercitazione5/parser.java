
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import Nodi.*;
import javax.swing.*;
import javax.swing.tree.MutableTreeNode;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\010\000\002\005\002" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\016\000\002" +
    "\013\014\000\002\014\002\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\016\004\000\002\016\005" +
    "\000\002\017\002\000\002\017\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\005\000\002\021" +
    "\012\000\002\022\002\000\002\022\005\000\002\023\011" +
    "\000\002\024\005\000\002\024\004\000\002\025\003\000" +
    "\002\025\005\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\027\005\000\002\030" +
    "\006\000\002\030\005\000\002\031\003\000\002\031\005" +
    "\000\002\031\004\000\002\031\006\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\032\004" +
    "\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\020\004\uffff\007\uffff\010\uffff\011\uffff\012" +
    "\uffff\015\uffff\064\uffff\001\002\000\004\002\261\001\002" +
    "\000\020\004\ufffc\007\006\010\014\011\013\012\010\015" +
    "\ufffc\064\007\001\002\000\040\005\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\022\ufff8\025\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\055\ufff8\063\ufff8\064\ufff8\001\002" +
    "\000\004\063\243\001\002\000\040\005\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\022\ufff5\025\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\055\ufff5\063\ufff5\064\ufff5\001" +
    "\002\000\004\063\232\001\002\000\046\004\ufffe\005\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\015\ufffe\022\ufffe\023" +
    "\ufffe\025\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\055\ufffe\063\ufffe\064\ufffe\001\002\000\040\005\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\022\ufff6\025\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\033\ufff6\055\ufff6\063\ufff6\064" +
    "\ufff6\001\002\000\040\005\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\022\ufff7\025\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\055\ufff7\063\ufff7\064\ufff7\001\002\000\006" +
    "\004\016\015\021\001\002\000\040\005\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\022\uffff\025\uffff\027\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\055\uffff\063\uffff\064\uffff\001" +
    "\002\000\004\002\001\001\002\000\006\004\ufffb\015\ufffb" +
    "\001\002\000\004\063\022\001\002\000\004\016\023\001" +
    "\002\000\016\007\006\010\014\011\013\012\010\017\uffe7" +
    "\021\030\001\002\000\004\017\036\001\002\000\004\063" +
    "\035\001\002\000\006\013\uffe5\017\uffe5\001\002\000\006" +
    "\013\033\017\uffe6\001\002\000\012\007\006\010\014\011" +
    "\013\012\010\001\002\000\004\063\032\001\002\000\006" +
    "\013\uffe2\017\uffe2\001\002\000\014\007\006\010\014\011" +
    "\013\012\010\021\030\001\002\000\006\013\uffe4\017\uffe4" +
    "\001\002\000\006\013\uffe3\017\uffe3\001\002\000\042\005" +
    "\uffff\007\uffff\010\uffff\011\uffff\012\uffff\020\040\022\uffff" +
    "\025\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\055" +
    "\uffff\063\uffff\064\uffff\001\002\000\040\005\uffe1\007\006" +
    "\010\014\011\013\012\010\022\uffe1\025\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\055\uffe1\063\uffe1\064\007" +
    "\001\002\000\012\007\006\010\014\011\013\012\010\001" +
    "\002\000\040\005\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\022\uffff\025\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\055\uffff\063\uffff\064\uffff\001\002\000\040\005\uffe1" +
    "\007\006\010\014\011\013\012\010\022\uffe1\025\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\055\uffe1\063\uffe1" +
    "\064\007\001\002\000\026\005\063\022\053\025\045\027" +
    "\044\030\056\031\050\032\046\033\064\055\062\063\055" +
    "\001\002\000\004\063\214\001\002\000\024\016\072\036" +
    "\065\054\077\056\071\057\074\060\075\061\066\062\070" +
    "\063\076\001\002\000\024\016\072\036\065\054\077\056" +
    "\071\057\074\060\075\061\066\062\070\063\076\001\002" +
    "\000\004\006\204\001\002\000\024\016\072\036\065\054" +
    "\077\056\071\057\074\060\075\061\066\062\070\063\076" +
    "\001\002\000\004\006\202\001\002\000\004\006\201\001" +
    "\002\000\024\016\072\036\065\054\077\056\071\057\074" +
    "\060\075\061\066\062\070\063\076\001\002\000\004\006" +
    "\166\001\002\000\006\014\164\016\137\001\002\000\024" +
    "\016\072\036\065\054\077\056\071\057\074\060\075\061" +
    "\066\062\070\063\076\001\002\000\004\006\162\001\002" +
    "\000\030\005\uffe0\022\uffe0\023\uffe0\025\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\055\uffe0\063\uffe0\001\002" +
    "\000\004\006\161\001\002\000\024\016\072\036\065\054" +
    "\077\056\071\057\074\060\075\061\066\062\070\063\076" +
    "\001\002\000\004\015\155\001\002\000\024\016\072\036" +
    "\065\054\077\056\071\057\074\060\075\061\066\062\070" +
    "\063\076\001\002\000\024\016\072\036\065\054\077\056" +
    "\071\057\074\060\075\061\066\062\070\063\076\001\002" +
    "\000\052\006\uffc2\013\uffc2\017\uffc2\024\uffc2\026\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\001\002\000\042\006\uffcd\035\105\036\102" +
    "\037\112\040\110\041\117\042\101\043\103\044\114\045" +
    "\116\046\111\047\104\050\115\051\107\052\106\053\113" +
    "\001\002\000\052\006\uffc1\013\uffc1\017\uffc1\024\uffc1\026" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\001\002\000\052\006\uffc5\013\uffc5" +
    "\017\uffc5\024\uffc5\026\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\001\002\000" +
    "\024\016\072\036\065\054\077\056\071\057\074\060\075" +
    "\061\066\062\070\063\076\001\002\000\052\006\uffbf\013" +
    "\uffbf\017\uffbf\024\uffbf\026\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002" +
    "\000\052\006\uffc4\013\uffc4\017\uffc4\024\uffc4\026\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\001\002\000\052\006\uffc3\013\uffc3\017\uffc3" +
    "\024\uffc3\026\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\001\002\000\054\006" +
    "\uffc0\013\uffc0\016\137\017\uffc0\024\uffc0\026\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\001\002\000\024\016\072\036\065\054\077\056" +
    "\071\057\074\060\075\061\066\062\070\063\076\001\002" +
    "\000\052\006\uffae\013\uffae\017\uffae\024\uffae\026\uffae\035" +
    "\105\036\102\037\112\040\110\041\117\042\uffae\043\103" +
    "\044\114\045\uffae\046\111\047\104\050\115\051\107\052" +
    "\106\053\113\001\002\000\024\016\072\036\065\054\077" +
    "\056\071\057\074\060\075\061\066\062\070\063\076\001" +
    "\002\000\024\016\072\036\065\054\077\056\071\057\074" +
    "\060\075\061\066\062\070\063\076\001\002\000\024\016" +
    "\072\036\065\054\077\056\071\057\074\060\075\061\066" +
    "\062\070\063\076\001\002\000\024\016\072\036\065\054" +
    "\077\056\071\057\074\060\075\061\066\062\070\063\076" +
    "\001\002\000\024\016\072\036\065\054\077\056\071\057" +
    "\074\060\075\061\066\062\070\063\076\001\002\000\024" +
    "\016\072\036\065\054\077\056\071\057\074\060\075\061" +
    "\066\062\070\063\076\001\002\000\024\016\072\036\065" +
    "\054\077\056\071\057\074\060\075\061\066\062\070\063" +
    "\076\001\002\000\024\016\072\036\065\054\077\056\071" +
    "\057\074\060\075\061\066\062\070\063\076\001\002\000" +
    "\024\016\072\036\065\054\077\056\071\057\074\060\075" +
    "\061\066\062\070\063\076\001\002\000\024\016\072\036" +
    "\065\054\077\056\071\057\074\060\075\061\066\062\070" +
    "\063\076\001\002\000\024\016\072\036\065\054\077\056" +
    "\071\057\074\060\075\061\066\062\070\063\076\001\002" +
    "\000\024\016\072\036\065\054\077\056\071\057\074\060" +
    "\075\061\066\062\070\063\076\001\002\000\024\016\072" +
    "\036\065\054\077\056\071\057\074\060\075\061\066\062" +
    "\070\063\076\001\002\000\024\016\072\036\065\054\077" +
    "\056\071\057\074\060\075\061\066\062\070\063\076\001" +
    "\002\000\024\016\072\036\065\054\077\056\071\057\074" +
    "\060\075\061\066\062\070\063\076\001\002\000\052\006" +
    "\uffba\013\uffba\017\uffba\024\uffba\026\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\103\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\001\002\000\052\006\uffb6\013\uffb6\017\uffb6\024\uffb6\026" +
    "\uffb6\035\105\036\102\037\112\040\110\041\117\042\101" +
    "\043\103\044\114\045\uffb6\046\111\047\104\050\115\051" +
    "\107\052\106\053\113\001\002\000\036\006\uffb3\013\uffb3" +
    "\017\uffb3\024\uffb3\026\uffb3\035\105\036\102\037\112\040" +
    "\110\041\117\042\uffb3\043\103\044\114\045\uffb3\001\002" +
    "\000\052\006\uffb7\013\uffb7\017\uffb7\024\uffb7\026\uffb7\035" +
    "\105\036\102\037\112\040\110\041\117\042\uffb7\043\103" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\001\002\000\036\006\uffb0\013\uffb0\017\uffb0" +
    "\024\uffb0\026\uffb0\035\105\036\102\037\112\040\110\041" +
    "\117\042\uffb0\043\103\044\114\045\uffb0\001\002\000\052" +
    "\006\uffbc\013\uffbc\017\uffbc\024\uffbc\026\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\103\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\001\002\000\036\006\uffb5\013\uffb5\017\uffb5\024\uffb5" +
    "\026\uffb5\035\105\036\102\037\112\040\110\041\117\042" +
    "\uffb5\043\103\044\114\045\uffb5\001\002\000\052\006\uffbb" +
    "\013\uffbb\017\uffbb\024\uffbb\026\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\103\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001" +
    "\002\000\036\006\uffb2\013\uffb2\017\uffb2\024\uffb2\026\uffb2" +
    "\035\105\036\102\037\112\040\110\041\117\042\uffb2\043" +
    "\103\044\114\045\uffb2\001\002\000\036\006\uffb1\013\uffb1" +
    "\017\uffb1\024\uffb1\026\uffb1\035\105\036\102\037\112\040" +
    "\110\041\117\042\uffb1\043\103\044\114\045\uffb1\001\002" +
    "\000\052\006\uffbe\013\uffbe\017\uffbe\024\uffbe\026\uffbe\035" +
    "\uffbe\036\uffbe\037\112\040\110\041\117\042\uffbe\043\103" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\001\002\000\036\006\uffb4\013\uffb4\017\uffb4" +
    "\024\uffb4\026\uffb4\035\105\036\102\037\112\040\110\041" +
    "\117\042\uffb4\043\103\044\114\045\uffb4\001\002\000\052" +
    "\006\uffb8\013\uffb8\017\uffb8\024\uffb8\026\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\103\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\001\002\000\052\006\uffbd\013\uffbd\017\uffbd\024\uffbd" +
    "\026\uffbd\035\uffbd\036\uffbd\037\112\040\110\041\117\042" +
    "\uffbd\043\103\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\001\002\000\052\006\uffb9\013" +
    "\uffb9\017\uffb9\024\uffb9\026\uffb9\035\105\036\102\037\112" +
    "\040\110\041\117\042\uffb9\043\103\044\114\045\uffb9\046" +
    "\111\047\104\050\115\051\107\052\106\053\113\001\002" +
    "\000\030\016\072\017\143\034\141\036\065\054\077\056" +
    "\071\057\074\060\075\061\066\062\070\063\076\001\002" +
    "\000\044\013\uffc9\017\uffc9\035\105\036\102\037\112\040" +
    "\110\041\117\042\101\043\103\044\114\045\116\046\111" +
    "\047\104\050\115\051\107\052\106\053\113\001\002\000" +
    "\004\063\151\001\002\000\006\013\144\017\145\001\002" +
    "\000\052\006\uffca\013\uffca\017\uffca\024\uffca\026\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\001\002\000\026\016\072\034\147\036\065" +
    "\054\077\056\071\057\074\060\075\061\066\062\070\063" +
    "\076\001\002\000\052\006\uffcb\013\uffcb\017\uffcb\024\uffcb" +
    "\026\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\001\002\000\044\013\uffc8\017" +
    "\uffc8\035\105\036\102\037\112\040\110\041\117\042\101" +
    "\043\103\044\114\045\116\046\111\047\104\050\115\051" +
    "\107\052\106\053\113\001\002\000\004\063\150\001\002" +
    "\000\006\013\uffc6\017\uffc6\001\002\000\006\013\uffc7\017" +
    "\uffc7\001\002\000\042\017\153\035\105\036\102\037\112" +
    "\040\110\041\117\042\101\043\103\044\114\045\116\046" +
    "\111\047\104\050\115\051\107\052\106\053\113\001\002" +
    "\000\052\006\uffad\013\uffad\017\uffad\024\uffad\026\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\001\002\000\052\006\uffaf\013\uffaf\017\uffaf" +
    "\024\uffaf\026\uffaf\035\uffaf\036\uffaf\037\112\040\110\041" +
    "\117\042\uffaf\043\103\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\001\002\000\004\006" +
    "\156\001\002\000\006\004\uffe9\015\uffe9\001\002\000\042" +
    "\006\160\035\105\036\102\037\112\040\110\041\117\042" +
    "\101\043\103\044\114\045\116\046\111\047\104\050\115" +
    "\051\107\052\106\053\113\001\002\000\030\005\uffd9\022" +
    "\uffd9\023\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\055\uffd9\063\uffd9\001\002\000\030\005\uffdd\022" +
    "\uffdd\023\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\055\uffdd\063\uffdd\001\002\000\030\005\uffdc\022" +
    "\uffdc\023\uffdc\025\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\055\uffdc\063\uffdc\001\002\000\042\006\uffd0\035" +
    "\105\036\102\037\112\040\110\041\117\042\101\043\103" +
    "\044\114\045\116\046\111\047\104\050\115\051\107\052" +
    "\106\053\113\001\002\000\024\016\072\036\065\054\077" +
    "\056\071\057\074\060\075\061\066\062\070\063\076\001" +
    "\002\000\042\006\uffcc\035\105\036\102\037\112\040\110" +
    "\041\117\042\101\043\103\044\114\045\116\046\111\047" +
    "\104\050\115\051\107\052\106\053\113\001\002\000\030" +
    "\005\uffdb\022\uffdb\023\uffdb\025\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\055\uffdb\063\uffdb\001\002\000\042" +
    "\024\170\035\105\036\102\037\112\040\110\041\117\042" +
    "\101\043\103\044\114\045\116\046\111\047\104\050\115" +
    "\051\107\052\106\053\113\001\002\000\042\005\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\022\uffff\023\uffff\025\uffff" +
    "\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\055\uffff\063" +
    "\uffff\064\uffff\001\002\000\042\005\uffe1\007\006\010\014" +
    "\011\013\012\010\022\uffe1\023\uffe1\025\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\055\uffe1\063\uffe1\064\007" +
    "\001\002\000\030\005\uffd7\022\053\023\174\025\045\027" +
    "\044\030\056\031\050\032\046\033\064\055\062\063\055" +
    "\001\002\000\004\005\177\001\002\000\040\005\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\022\uffff\025\uffff\027\uffff" +
    "\030\uffff\031\uffff\032\uffff\033\uffff\055\uffff\063\uffff\064" +
    "\uffff\001\002\000\040\005\uffe1\007\006\010\014\011\013" +
    "\012\010\022\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\055\uffe1\063\uffe1\064\007\001\002\000\026" +
    "\005\uffd6\022\053\025\045\027\044\030\056\031\050\032" +
    "\046\033\064\055\062\063\055\001\002\000\004\022\200" +
    "\001\002\000\004\006\uffd8\001\002\000\030\005\uffdf\022" +
    "\uffdf\023\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\055\uffdf\063\uffdf\001\002\000\030\005\uffda\022" +
    "\uffda\023\uffda\025\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\055\uffda\063\uffda\001\002\000\042\006\uffcf\035" +
    "\105\036\102\037\112\040\110\041\117\042\101\043\103" +
    "\044\114\045\116\046\111\047\104\050\115\051\107\052" +
    "\106\053\113\001\002\000\030\005\uffde\022\uffde\023\uffde" +
    "\025\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\055" +
    "\uffde\063\uffde\001\002\000\042\006\uffce\035\105\036\102" +
    "\037\112\040\110\041\117\042\101\043\103\044\114\045" +
    "\116\046\111\047\104\050\115\051\107\052\106\053\113" +
    "\001\002\000\042\026\207\035\105\036\102\037\112\040" +
    "\110\041\117\042\101\043\103\044\114\045\116\046\111" +
    "\047\104\050\115\051\107\052\106\053\113\001\002\000" +
    "\040\005\uffff\007\uffff\010\uffff\011\uffff\012\uffff\022\uffff" +
    "\025\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\055" +
    "\uffff\063\uffff\064\uffff\001\002\000\040\005\uffe1\007\006" +
    "\010\014\011\013\012\010\022\uffe1\025\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\055\uffe1\063\uffe1\064\007" +
    "\001\002\000\026\005\212\022\053\025\045\027\044\030" +
    "\056\031\050\032\046\033\064\055\062\063\055\001\002" +
    "\000\004\026\213\001\002\000\004\006\uffd5\001\002\000" +
    "\030\006\uffd2\013\uffd2\016\uffd2\036\uffd2\054\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\001\002\000" +
    "\030\006\uffd3\013\217\016\072\036\065\054\077\056\071" +
    "\057\074\060\075\061\066\062\070\063\076\001\002\000" +
    "\042\006\uffd4\035\105\036\102\037\112\040\110\041\117" +
    "\042\101\043\103\044\114\045\116\046\111\047\104\050" +
    "\115\051\107\052\106\053\113\001\002\000\004\063\220" +
    "\001\002\000\030\006\uffd1\013\uffd1\016\uffd1\036\uffd1\054" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\001\002\000\026\005\222\022\053\025\045\027\044\030" +
    "\056\031\050\032\046\033\064\055\062\063\055\001\002" +
    "\000\004\015\223\001\002\000\004\006\224\001\002\000" +
    "\006\004\uffe8\015\uffe8\001\002\000\040\005\uffe1\007\006" +
    "\010\014\011\013\012\010\022\uffe1\025\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\055\uffe1\063\uffe1\064\007" +
    "\001\002\000\026\005\227\022\053\025\045\027\044\030" +
    "\056\031\050\032\046\033\064\055\062\063\055\001\002" +
    "\000\004\004\230\001\002\000\004\006\231\001\002\000" +
    "\004\002\ufffd\001\002\000\010\006\ufff4\013\ufff4\014\241" +
    "\001\002\000\006\006\235\013\234\001\002\000\004\063" +
    "\236\001\002\000\046\004\ufffa\005\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\015\ufffa\022\ufffa\023\ufffa\025\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\055\ufffa\063\ufffa" +
    "\064\ufffa\001\002\000\010\006\ufff3\013\ufff3\014\237\001" +
    "\002\000\024\016\072\036\065\054\077\056\071\057\074" +
    "\060\075\061\066\062\070\063\076\001\002\000\044\006" +
    "\ufff1\013\ufff1\035\105\036\102\037\112\040\110\041\117" +
    "\042\101\043\103\044\114\045\116\046\111\047\104\050" +
    "\115\051\107\052\106\053\113\001\002\000\024\016\072" +
    "\036\065\054\077\056\071\057\074\060\075\061\066\062" +
    "\070\063\076\001\002\000\044\006\ufff2\013\ufff2\035\105" +
    "\036\102\037\112\040\110\041\117\042\101\043\103\044" +
    "\114\045\116\046\111\047\104\050\115\051\107\052\106" +
    "\053\113\001\002\000\004\014\257\001\002\000\006\006" +
    "\246\013\245\001\002\000\004\063\247\001\002\000\046" +
    "\004\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\015" +
    "\ufff9\022\ufff9\023\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\055\ufff9\063\ufff9\064\ufff9\001\002\000" +
    "\004\014\250\001\002\000\014\056\253\057\254\060\252" +
    "\061\255\062\251\001\002\000\006\006\uffea\013\uffea\001" +
    "\002\000\006\006\uffee\013\uffee\001\002\000\006\006\uffec" +
    "\013\uffec\001\002\000\006\006\uffeb\013\uffeb\001\002\000" +
    "\006\006\uffed\013\uffed\001\002\000\006\006\uffef\013\uffef" +
    "\001\002\000\014\056\253\057\254\060\252\061\255\062" +
    "\251\001\002\000\006\006\ufff0\013\ufff0\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\005\014\006\011\007\010\001\001\000\002" +
    "\001\001\000\004\011\243\001\001\000\002\001\001\000" +
    "\004\010\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\016\013\017\001\001\000" +
    "\004\003\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\024\014" +
    "\023\015\026\016\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\024\016\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\036\001\001\000\010\006\011\007\010" +
    "\017\220\001\001\000\004\007\040\001\001\000\004\003" +
    "\041\001\001\000\010\006\011\007\010\017\042\001\001" +
    "\000\020\020\057\021\051\023\046\024\060\026\056\027" +
    "\053\030\050\001\001\000\004\025\214\001\001\000\006" +
    "\030\072\032\205\001\001\000\006\030\072\032\204\001" +
    "\001\000\002\001\001\000\006\030\072\032\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\072\032" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\072\032\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\072\032\156\001\001" +
    "\000\002\001\001\000\006\030\072\032\066\001\001\000" +
    "\006\030\072\032\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\072\032\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\072\032" +
    "\077\001\001\000\002\001\001\000\006\030\072\032\135" +
    "\001\001\000\006\030\072\032\134\001\001\000\006\030" +
    "\072\032\133\001\001\000\006\030\072\032\132\001\001" +
    "\000\006\030\072\032\131\001\001\000\006\030\072\032" +
    "\130\001\001\000\006\030\072\032\127\001\001\000\006" +
    "\030\072\032\126\001\001\000\006\030\072\032\125\001" +
    "\001\000\006\030\072\032\124\001\001\000\006\030\072" +
    "\032\123\001\001\000\006\030\072\032\122\001\001\000" +
    "\006\030\072\032\121\001\001\000\006\030\072\032\120" +
    "\001\001\000\006\030\072\032\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\072\031\141\032\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\072\032\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\072\032" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\170\001\001\000\010\006\011\007" +
    "\010\017\171\001\001\000\022\020\057\021\051\022\172" +
    "\023\046\024\060\026\056\027\053\030\050\001\001\000" +
    "\002\001\001\000\004\003\174\001\001\000\010\006\011" +
    "\007\010\017\175\001\001\000\020\020\057\021\051\023" +
    "\046\024\060\026\056\027\053\030\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\207\001\001\000\010\006" +
    "\011\007\010\017\210\001\001\000\020\020\057\021\051" +
    "\023\046\024\060\026\056\027\053\030\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\072\032\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\057\021\051\023\046" +
    "\024\060\026\056\027\053\030\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\011" +
    "\007\010\017\225\001\001\000\020\020\057\021\051\023" +
    "\046\024\060\026\056\027\053\030\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\072\032\237\001\001\000" +
    "\002\001\001\000\006\030\072\032\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\257\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              Program RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunList fl = (FunList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Main m = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(vdl,fl,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(vdl == null)
	                                                                        vdl = new VarDeclList(vd);
	                                                                    else vdl.addNode(vd);
                                                                        RESULT = vdl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              Main RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new Main(vdl,sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              FunList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= FunList Fun 
            {
              FunList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunList fl = (FunList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fun f = (Fun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(fl == null) fl = new FunList(f);
                                                                else fl.addNode(f);
	                                                            RESULT = fl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecl(t,idListInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDecl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInitObbl idListInitObbl = (IdListInitObbl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecl(new Type(v),idListInitObbl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              Type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              IdListInit RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdListInit(new IdInit(new Identifier(id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              IdListInit RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = idListInit.addNode(new IdInit(new Identifier(id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              IdListInit RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdListInit(new IdInit(new Identifier(id) , expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              IdListInit RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = idListInit.addNode(new IdInit(new Identifier(id) , expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              IdListInitObbl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdListInitObbl(new IdInit(new Identifier(id) , c)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              IdListInitObbl RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInitObbl idListInitObbl = (IdListInitObbl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = idListInitObbl.addNode(new IdInit(new Identifier(id) , c)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Const RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntConst i = (IntConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Const RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RealConst r = (RealConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const(r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Const RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bool t = (Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Const RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bool f = (Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              Const RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StringConst s = (StringConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Const(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              Fun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParamDeclList pdl = (ParamDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Fun(new Identifier (id),pdl,t,vdl,sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              Fun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParamDeclList pdl = (ParamDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Fun(new Identifier (id),pdl,vdl,sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= 
            {
              ParamDeclList RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ParamDeclList RESULT =null;
		int nepdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nepdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NonEmptyParamDeclList nepdl = (NonEmptyParamDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDeclList(nepdl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NonEmptyParamDeclList ::= ParDecl 
            {
              NonEmptyParamDeclList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecl pl = (ParDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NonEmptyParamDeclList(pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              NonEmptyParamDeclList RESULT =null;
		int nepdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nepdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NonEmptyParamDeclList nepdl = (NonEmptyParamDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecl pl = (ParDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(nepdl == null) nepdl = new NonEmptyParamDeclList(pl);
	                                                                 else nepdl.addNode(pl);
	                                                                 RESULT = nepdl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecl ::= Type ID 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDecl(t,new Identifier(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= OUT Type ID 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDecl(new InOut("out"),t,new Identifier(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= 
            {
              StatList RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= StatList Stat 
            {
              StatList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(sl == null) sl=new StatList(s);
	                                                                else sl.addNode(s);
	                                                                RESULT = sl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStat is = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat(is);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileStat ws = (WhileStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat(ws);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadStat SEMI 
            {
              Stat RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadStat rs = (ReadStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat(rs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteStat ws = (WriteStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat(ws);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStat as = (AssignStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat(as);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallFun SEMI 
            {
              Stat RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallFun cf = (CallFun)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat(cf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat(new ReturnStat(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Else el = (Else)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStat(e,vdl,sl,el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= 
            {
              Else RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= ELSE VarDeclList StatList 
            {
              Else RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Else(vdl,sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatList statList = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WhileStat(expr,vdl,statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReadStat ::= READ IdList Expr 
            {
              ReadStat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdList idList = (IdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStat(idList, expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReadStat ::= READ IdList 
            {
              ReadStat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdList idList = (IdList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStat(idList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IdList ::= ID 
            {
              IdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdList(new Identifier(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IdList ::= IdList COMMA ID 
            {
              IdList RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdList idList = (IdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(idList != null) idList = new IdList(new Identifier(id));
	                                                    else idList.addNode(new Identifier(id));
	                                                    RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITE Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStat(expr,WriteType.WRITE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WriteStat ::= WRITELN Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStat(expr,WriteType.WRITELN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WriteStat ::= WRITET Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStat(expr,WriteType.WRITET);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WriteStat ::= WRITEB Expr 
            {
              WriteStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStat(expr,WriteType.WRITEB);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStat(new Identifier(id), expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallFun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprList exprList = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallFun(new Identifier(id), exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CallFun ::= ID LPAR RPAR 
            {
              CallFun RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CallFun(new Identifier(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprList ::= Expr 
            {
              ExprList RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprList(expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprList ::= ExprList COMMA Expr 
            {
              ExprList RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprList exprList = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(exprList == null ) exprList = new ExprList(expr);
	                                                    else exprList.addNode(expr);
	                                                    RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprList ::= OUTPAR ID 
            {
              ExprList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprList(new Identifier(new InOut("out"),id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprList ::= ExprList COMMA OUTPAR ID 
            {
              ExprList RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprList exprList = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(exprList==null) exprList=new ExprList(new Identifier(new InOut("out"),id));
	                                                    else exprList.addNode(new Identifier(new InOut("out"),id));
                                                        RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bool t = (Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bool f = (Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntConst integer = (IntConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(integer);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RealConst real = (RealConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(real);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StringConst string = (StringConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(string);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(new Identifier(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= CallFun 
            {
              Expr RESULT =null;
		int callfunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callfunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFun callfun = (CallFun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(callfun);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr DIVINT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(expr1, s, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(s, expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(s, expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
